name: CI/CD Pipeline with Security Scanning and AKS Deployment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: flask-app
  AZURE_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}
  AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
  REGISTRY_LOGIN_SERVER: ${{ secrets.REGISTRY_LOGIN_SERVER }}

jobs:
  # Job 1: Code Quality and Security Scanning
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Python linting with pylint
      run: |
        pylint app.py --exit-zero

    - name: Run Python tests
      run: |
        python -m pytest test_app.py -v --cov=app --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests

  # Job 2: Build and Security Scan
  build-and-scan:
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
        docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.IMAGE_NAME }}:latest

    - name: Install Snyk CLI
      run: |
        curl -Lo snyk https://github.com/snyk/snyk/releases/latest/download/snyk-linux
        chmod +x snyk
        sudo mv snyk /usr/local/bin/

    - name: Authenticate Snyk
      run: snyk auth ${{ secrets.SNYK_TOKEN }}

    - name: Run Snyk to check for vulnerabilities in dependencies
      run: |
        snyk test --severity-threshold=high --json > snyk-results.json || true

    - name: Run Snyk to check Docker image for vulnerabilities
      run: |
        snyk container test ${{ env.IMAGE_NAME }}:latest --severity-threshold=high --json > snyk-docker-results.json || true

    - name: Upload Snyk results
      uses: actions/upload-artifact@v3
      with:
        name: snyk-results
        path: |
          snyk-results.json
          snyk-docker-results.json

    - name: Save Docker image
      run: |
        docker save ${{ env.IMAGE_NAME }}:${{ github.sha }} > image.tar

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: image.tar

  # Job 3: Push to Azure Container Registry
  push-to-acr:
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Docker image artifact
      uses: actions/download-artifact@v3
      with:
        name: docker-image

    - name: Load Docker image
      run: |
        docker load < image.tar

    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    - name: Login to Azure
      run: |
        az login --service-principal \
          --username ${{ secrets.AZURE_CLIENT_ID }} \
          --password ${{ secrets.AZURE_CLIENT_SECRET }} \
          --tenant ${{ secrets.AZURE_TENANT_ID }}
        az account set --subscription ${{ secrets.AZURE_SUSCRIPTION_ID }}

    - name: Login to Azure Container Registry
      run: |
        echo ${{ secrets.REGISTRY_PASSWORD }} | docker login ${{ secrets.REGISTRY_LOGIN_SERVER }} -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin

    - name: Tag and push image to ACR
      run: |
        docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest

  # Job 4: Deploy to AKS
  deploy-to-aks:
    runs-on: ubuntu-latest
    needs: push-to-acr
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    - name: Login to Azure
      run: |
        az login --service-principal \
          --username ${{ secrets.AZURE_CLIENT_ID }} \
          --password ${{ secrets.AZURE_CLIENT_SECRET }} \
          --tenant ${{ secrets.AZURE_TENANT_ID }}
        az account set --subscription ${{ secrets.AZURE_SUSCRIPTION_ID }}

    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }} --overwrite-existing

    - name: Create Kubernetes namespace if not exists
      run: |
        kubectl create namespace flask-app || echo "Namespace already exists"

    - name: Create Docker registry secret
      run: |
        kubectl create secret docker-registry acr-secret \
          --docker-server=${{ secrets.REGISTRY_LOGIN_SERVER }} \
          --docker-username=${{ secrets.REGISTRY_USERNAME }} \
          --docker-password=${{ secrets.REGISTRY_PASSWORD }} \
          --namespace=flask-app \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to AKS
      run: |
        # Create deployment manifest
        cat <<EOF > deployment.yaml
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: flask-app-deployment
          namespace: flask-app
          labels:
            app: flask-app
        spec:
          replicas: 3
          selector:
            matchLabels:
              app: flask-app
          template:
            metadata:
              labels:
                app: flask-app
            spec:
              imagePullSecrets:
              - name: acr-secret
              containers:
              - name: flask-app
                image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
                ports:
                - containerPort: 8080
                env:
                - name: FLASK_ENV
                  value: "production"
                resources:
                  requests:
                    memory: "128Mi"
                    cpu: "100m"
                  limits:
                    memory: "256Mi"
                    cpu: "200m"
                livenessProbe:
                  httpGet:
                    path: /
                    port: 8080
                  initialDelaySeconds: 30
                  periodSeconds: 10
                readinessProbe:
                  httpGet:
                    path: /
                    port: 8080
                  initialDelaySeconds: 5
                  periodSeconds: 5
              securityContext:
                runAsNonRoot: true
                runAsUser: 1000
                fsGroup: 1000
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: flask-app-service
          namespace: flask-app
        spec:
          selector:
            app: flask-app
          ports:
          - protocol: TCP
            port: 80
            targetPort: 8080
          type: LoadBalancer
        ---
        apiVersion: networking.k8s.io/v1
        kind: NetworkPolicy
        metadata:
          name: flask-app-network-policy
          namespace: flask-app
        spec:
          podSelector:
            matchLabels:
              app: flask-app
          policyTypes:
          - Ingress
          - Egress
          ingress:
          - from: []
            ports:
            - protocol: TCP
              port: 8080
          egress:
          - {}
        EOF

        # Apply the deployment
        kubectl apply -f deployment.yaml

    - name: Wait for deployment to be ready
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/flask-app-deployment -n flask-app

    - name: Get service details
      run: |
        kubectl get services -n flask-app
        echo "Waiting for LoadBalancer IP..."
        kubectl get service flask-app-service -n flask-app --watch --timeout=300s

    - name: Verify deployment
      run: |
        kubectl get pods -n flask-app
        kubectl describe deployment flask-app-deployment -n flask-app

  # Job 5: Security Report
  security-report:
    runs-on: ubuntu-latest
    needs: [build-and-scan]
    if: always()
    
    steps:
    - name: Download Snyk results
      uses: actions/download-artifact@v3
      with:
        name: snyk-results

    - name: Process Snyk results
      run: |
        echo "## Security Scan Results" >> security-report.md
        echo "" >> security-report.md
        
        if [ -f snyk-results.json ]; then
          echo "### Dependency Vulnerabilities" >> security-report.md
          echo "```json" >> security-report.md
          cat snyk-results.json >> security-report.md
          echo "```" >> security-report.md
        fi
        
        if [ -f snyk-docker-results.json ]; then
          echo "### Docker Image Vulnerabilities" >> security-report.md
          echo "```json" >> security-report.md
          cat snyk-docker-results.json >> security-report.md
          echo "```" >> security-report.md
        fi

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md
